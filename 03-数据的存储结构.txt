数据的存储结构
    数据的存储结构：主要包括数据元素本身的存储以及数据元素之间关系表示，是数据的逻辑结构在计算机中的表示。
    常见的存储结构有：顺序存储，链式存储，索引存储，以及散列存储。
    顺序存储结构：把逻辑上相邻的节点存储在物理位置上相邻的存储单元中，结点之间的逻辑关系由存储单元的邻接关系来体现。
        优点：
            1.节省存储空间，因为分配给数据的存储单元全用存放结点的数据（不考虑c/c++语言中数据需指定大小的情况），结点之间的逻辑关系没有占用额外的存储空间。
            2.采用这种方法时，可实现对结点的随机存取，即每一个结点对应一个序号，由该序号可以直接计算出来结点的存储地址。
        缺点：
            1.插入和删除操作需要移动元素，效率较低。
            2.必须提前分配固定数量的空间，如果存储元素少，可能导致空间浪费。
    链式存储结构：数据元素的存储对应的是不连续的存储空间，每个存储节点对应一个需要存储的数据元素。每个结点是由数据域和指针域组成。元素之间的逻辑关系通过存储节点之间的链接关系反映出来。逻辑上相邻的节点物理上不必相邻。
        优点：
            1.插入，删除灵活（不必移动节点，只要改变节点中的指针）。
            2.有元素才会分配结点空间，不会有闲置的结点。
        缺点：
            1.比顺序存储结构的存储密度小（每个节点都由数据域和指针域组成，所以相同空间内假设全存满的话顺序比链式存储更多)。
            2.查找结点时链式存储要比顺序存储慢。
    索引存储结构：除建立存储结点信息外，还建立附加的索引表来标识结点的地址。
        比如：图书、字典的目录。
    散列存储结构：根据结点的关键字直接计算出该结点的存储地址HashSet，HashMap这种神奇的结构，添加、查询速度快。

    线性表逻辑结构对应的顺序存储结构为顺序表，对应的链式存储结构为链表。

    同一逻辑结构可以对应多种存储结构。
    同样的运算，在不用的存储结构中，其实现过程是不同的。