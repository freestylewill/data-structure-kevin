线性表的存储结构
    顺序表---顺序存储结构
        特点：在内存中分配连续的空间，只存储数据，不需要存储地址信息，位置就隐含着地址。
        优点：
            1.节省存储空间，因为分配给数据的存储单元全用存放结点的数据（不考虑c/c++语言中数组需指定大小的情况），结点之间的逻辑关系没有占用额外的存储空间。
            2.索引查找效率高，即每一个结点对应一个序号，由该序号可以直接计算出来结点的存储地址。
                假设线性表的每个数据元素需占用K个存储单元，并以元素所占的第一个存储单元的地址作为数据元素的存储地址。
                       则线性表中序号为i的数据元素的存储地址LOC(a i )与序号为i+1 的数据元素的存储地址LOC(a i+1 )之间的关系为：
                           LOC(a i+1 ) = LOC(a i ) + K
                       通常来说，线性表的i号元素a i 的存储地址为：
                           LOC(a i ) = LOC(a 0 ) + i×K
                       其中LOC(a 0 )为 0 号元素a 0 的存储地址，通常称为线性表的起始地址。
        缺点：
            1.插入和删除操作需要移动元素，效率较低。
            2.必须提前分配固定数量的空间，如果存储元素少，可能导致空闲浪费。
            3.按照内容查询效率低，因为需要逐个比较判断。
        数组索引的计算查找公式：
            数组的起始地址+每个元素大小*索引   1024 + 4 * n = ？
            比如1024 + 4 * 5 = 1044
        举例：长度为n的数组中删除元素，假设每个元素删除的概率是相同的，问时间复杂度是？
               删掉第n个元素，需要移动0个元素
               删掉第n-1个元素，需要移动1个元素
               删掉第n-2个元素，需要移动2个元素
               ....
               删掉第2个元素，需要移动n-2个元素
               删掉第1个元素，需要移动n-1个元素
               所以平均时间频度是：0*1/n + 1*1/n  + 2*1/n + 3*1/n +  + (n-1)*1/n = (n-1)*n/2 * 1/n = (n-1)/2
               T(n) = (n-1)/2
               T(n)= O(n)
    链表---链式存储结构
        特点：数据元素的存储对应的是不连续的存储空间，每个存储结点对应一个需要存储的数据元素。
            每个结点是由数据域和指针域组成。元素之间的逻辑关系通过存储结点之间的链接关系反映出来。
            逻辑上相邻的节点物理上不必相邻。
        优点：
            1.插入和删除灵活（不必移动节点，只要改变节点中指针，但是需要先定位到元素上）。
            2.有元素才会分配空间，不会有闲置的结点。
        缺点：
            1.比顺序存储结构的存储密度小（每个结点都有数据域和指针域组成，所以相同空间内假设全存满的话顺序比链式存储更多）。
            2.查找结点时链式比顺序存储慢（每个结点地址不连续、无规律，导致按照索引查询效率低下）。
