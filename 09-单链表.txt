单链表
    链表是一系列的存储数据元素的单元通过指针串接起来形成的，因此每个单元至少有两个域，一个域用于数据元素的存储，另一个域是指向其他单元的指针。
        这里具有一个数据域和多个指针域的存储单元通常称为节点（node）。它是构成单链表的基本结点结构。在结点中数据域用来存储数据元素，指针域用于指向下一个具有相同结构的结点。
    单链表的一个重要特性就是只能通过前驱结点找到后续结点，而无法从后续结点找到前驱结点。
    查询操作：
        在单链表中进行查找操作，只能从链表的首结点开始，通过每个结点的next引用来一次访问链表中的每个结点以完成相应的查询操作。
        缺点：逐个比较，频繁移动指针，导致效率低下。
        注意：如果要查询第i个元素的值，无法直接定位，也只能从首结点开始逐个移动到第i个结点，效率同样低下。
    添加操作：
        在单链表中数据元素的插入，是通过在链表中插入数据元素所属的结点来完成的。对于链表的不同位置，插入的过程会有细微的差别，中间、末尾的添加过程是一样的，关键是在首部添加，会改变整个单链表的起始结点。
        优点：添加结点不需要移动元素，只需要修改元素的指针即可，效率高。
        注意：如果需要先查询到添加位置再添加元素，因为有逐个查询的过程，效率不高。
    删除操作：
        类似添加操作。
    使用单链表实现线性表时，为了程序更简洁，通常在单链表的最前面添加一个哑元结点，也称为头结点。
    在头结点中不存储任何实质的数据对象，其next域指向线性表中0号元素所在的结点。
    可以对空表、非空表的情况以及对首元结点进行统一处理，编程更方便，常用头结点。
    缺点：单链表中只能通过一个结点的引用访问其后续结点，而无法直接访问其前驱结点，要在单链表中找到某个结点的前驱结点，必须从链表的首结点出发依次向后寻找，但是需要Ο(n)时间。